// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{.SqlcVersion}}
//   sqlc-gen-java {{.SqlcGenJavaVersion}}

package {{.Package}};

{{range imports .SourceName}}
import {{.}};
{{- end}}

public class QueriesImpl implements Queries {
{{range .Queries}}
    public static final String {{.ConstantName}} = """
            -- name: {{.MethodName}} {{.Cmd}}{{.SQL | nindent 12}}
            """;
{{end}}

    protected final DataSource ds;

    public QueriesImpl(final DataSource ds) {
        this.ds = ds;
    }

{{- range .Queries}}
{{- if eq .Cmd ":one"}}

    {{range .Comments}}{{comment .}}
    {{end -}}
    @Overrides
    public {{.Ret.Type}} {{.MethodName}}({{.Arg.Pair}}) {
        {{.Ret.Type}} {{.Ret.Name}} = null;
        try (final Connection conn = ds.getConnection(); 
             final PreparedStatement ps = conn.prepareStatement({{.ConstantName}})) { {{.Arg.Bindings | nindent 12}}
            try (final ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    {{.Ret.Name}} = {{.Ret.ResultSet}};
                }
            }
        } catch (final SQLException e) {
            throw new RuntimeException(e);
        }
        return {{.Ret.Name}};
    }
{{- end}}
{{- if eq .Cmd ":many"}}

    {{range .Comments}}{{comment .}}
    {{end -}}
    @Overrides
    public List<{{.Ret.Type}}> {{.MethodName}}({{.Arg.Pair}}) {
        final List<{{.Ret.Type}}> {{.Ret.Name}} = new ArrayList<>();
        try (final Connection conn = ds.getConnection(); 
             final PreparedStatement ps = conn.prepareStatement({{.ConstantName}})) { {{.Arg.Bindings | nindent 12}}
            try (final ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    {{.Ret.Name}}.add({{.Ret.ResultSet}});
                }
            }
        } catch (final SQLException e) {
            throw new RuntimeException(e);
        }
        return {{.Ret.Name}};
    }
{{- end}}
{{- if eq .Cmd ":exec"}}

    {{range .Comments}}{{comment .}}
    {{end -}}
    @Overrides
    public void {{.MethodName}}({{.Arg.Pair}}) {
        try (final Connection conn = ds.getConnection(); 
             final PreparedStatement ps = conn.prepareStatement({{.ConstantName}})) { {{.Arg.Bindings | nindent 12}}
            ps.execute();
        } catch (final SQLException e) {
            throw new RuntimeException(e);
        }
    }
{{- end}}
{{- if eq .Cmd ":execrows"}}

    {{range .Comments}}{{comment .}}
    {{end -}}
    @Overrides
    public long {{.MethodName}}({{.Arg.Pair}}) {
        try (final Connection conn = ds.getConnection(); 
             final PreparedStatement ps = conn.prepareStatement({{.ConstantName}})) { {{.Arg.Bindings | nindent 12}}
            return ps.executeLargeUpdate();
        } catch (final SQLException e) {
            throw new RuntimeException(e);
        }
    }
{{- end}}
{{- if eq .Cmd ":execlastid"}}

    {{range .Comments}}{{comment .}}
    {{end -}}
    @Overrides
    public long {{.MethodName}}({{.Arg.Pair}}) {
        try (final Connection conn = ds.getConnection(); 
             final PreparedStatement ps = conn.prepareStatement({{.ConstantName}}, Statement.RETURN_GENERATED_KEYS)) { {{.Arg.Bindings | nindent 12}}
            final long affectedRows = ps.executeLargeUpdate();
            if (affectedRows > 0) {
                try(final ResultSet generatedKeys = ps.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        return generatedKeys.getLong(1);
                    }
                }
            }
        } catch (final SQLException e) {
            throw new RuntimeException(e);
        }
        return -1;
    }
{{- end}}
{{- if eq .Cmd ":execresult"}}

    {{range .Comments}}{{comment .}}
    {{end -}}
    @Overrides
    public Map.Entry<Long, Long> {{.MethodName}}({{.Arg.Pair}}) {
        try (final Connection conn = ds.getConnection(); 
             final PreparedStatement ps = conn.prepareStatement({{.ConstantName}}, Statement.RETURN_GENERATED_KEYS)) { {{.Arg.Bindings | nindent 12}}
            final long affectedRows = ps.executeLargeUpdate();
            if (affectedRows > 0) {
                try(final ResultSet generatedKeys = ps.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        return Map.entry(affectedRows, generatedKeys.getLong(1));
                    }
                }
            }
        } catch (final SQLException e) {
            throw new RuntimeException(e);
        }
        return Map.entry(-1L, -1L);
    }
{{- end}}
{{- end}}
}